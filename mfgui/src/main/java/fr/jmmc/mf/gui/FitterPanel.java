/*******************************************************************************
 * JMMC project ( http://www.jmmc.fr ) - Copyright (C) CNRS.
 ******************************************************************************/
/*
 * FitterPanel.java
 *
 */
package fr.jmmc.mf.gui;

import fr.jmmc.mf.gui.models.SettingsModel;
import fr.jmmc.mf.models.Fitter;
import fr.jmmc.mf.models.Settings;
import java.awt.Component;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;

public class FitterPanel extends javax.swing.JPanel {

    Settings current = null;
    SettingsViewerInterface settingsViewer = null;

    /** Creates new form FitterPanel */
    public FitterPanel(SettingsViewerInterface viewer) {
        settingsViewer = viewer;
        initComponents();
        fitterComboBox.setModel(SettingsModel.getSupportedFitters());
        fitterComboBox.setRenderer(new FitterRenderer());
    }

    public void show(Settings s) {
        current = s;
        Fitter f = SettingsModel.getFitter(s.getFitter());
        if ( f != null) {
            fitterComboBox.setSelectedItem(f);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        fitterComboBox = new javax.swing.JComboBox();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Fitter setup"));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jPanel1.setLayout(new java.awt.GridBagLayout());

        fitterComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "standard" }));
        fitterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fitterComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel1.add(fitterComboBox, gridBagConstraints);

        add(jPanel1);
    }// </editor-fold>//GEN-END:initComponents

    private void fitterComboBoxActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_fitterComboBoxActionPerformed
        //current.setFitter((String) fitterComboBox.getSelectedItem());
        if (fitterComboBox.getSelectedItem() != null) {
            String f = ((Fitter) fitterComboBox.getSelectedItem()).getName();
            current.setFitter(f);
        }
    }//GEN-LAST:event_fitterComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox fitterComboBox;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    private class FitterRenderer extends DefaultListCellRenderer {

        public FitterRenderer() {
        }

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            setToolTipText(null);

            if (value instanceof Fitter) {
                setText(((Fitter) value).getName());
                setToolTipText(((Fitter) value).getDesc());
            }
            // TODO test else case

            return this;
        }

    }

}
