/*
 * ModelPanel.java
 *
 * Created on 13 novembre 2006, 09:42
 */

package jmmc.mf.gui;
import jmmc.mf.models.*;
import jmmc.mcs.gui.ReportDialog;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;
import java.util.*;
import java.lang.reflect.*;
/**
 *
 * @author  mella
 */
public class ModelPanel extends javax.swing.JPanel {
     static java.util.logging.Logger logger = java.util.logging.Logger.getLogger("jmmc.mf.gui.ModelPanel");
     ParametersTableModel parametersTableModel;
     Model current;
     
    /** Creates new form ModelPanel */
    public ModelPanel() {
        // first create our parameters table model
        parametersTableModel = new ParametersTableModel();     
        initComponents();        
    }
    
    public void show(Model m){
        current=m;
        nameTextField.setText(m.getName());
        typeComboBox.setSelectedItem(m.getType()); 
        parametersTableModel.setModel(m,false);        
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        typeComboBox = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        parametersTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        addParameterButton = new javax.swing.JButton();
        parameterNameTextField = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("Type:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel1.add(jLabel2, gridBagConstraints);

        nameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextFieldActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(nameTextField, gridBagConstraints);

        jLabel1.setText("Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jLabel1, gridBagConstraints);

        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "disk", "punct", "manual" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(typeComboBox, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters"));
        parametersTable.setModel(parametersTableModel);
        jScrollPane1.setViewportView(parametersTable);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel3);

        add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        addParameterButton.setText("Add a parameter");
        addParameterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addParameterButtonActionPerformed(evt);
            }
        });

        jPanel4.add(addParameterButton, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(parameterNameTextField, gridBagConstraints);

        add(jPanel4, java.awt.BorderLayout.SOUTH);

    }// </editor-fold>//GEN-END:initComponents
    
    private void addParameterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addParameterButtonActionPerformed
        logger.entering(""+this.getClass(), "addParameterButtonActionPerformed");
        Parameter p = new Parameter();
        p.setName(parameterNameTextField.getText());
        parameterNameTextField.setText("");
        current.addParameter(p);
        parametersTableModel.setModel(current,false);        
    }//GEN-LAST:event_addParameterButtonActionPerformed
    
    private void nameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextFieldActionPerformed
        logger.entering(""+this.getClass(), "nameTextFieldActionPerformed");
        current.setName(nameTextField.getText());
    }//GEN-LAST:event_nameTextFieldActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addParameterButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JTextField parameterNameTextField;
    private javax.swing.JTable parametersTable;
    private javax.swing.JComboBox typeComboBox;
    // End of variables declaration//GEN-END:variables
    
      /**
     * Implementation of a table model that is based on a given Model.
     */
    class ParametersTableModel extends  AbstractTableModel{
        protected Model currentModel=null;
        protected boolean recursive;
        protected Parameter[] parameters;
        // Store model of corresponding parameter in parameters array
        protected Model[] modelOfParameters; 
        
        
        // Init columns titles and types
        protected final String[] columnNames = new String[]{
            "Name","Type","Units","Value","MinValue","MaxValue","Scale",
                "HasFixedValue"};        
        protected final Class[] columnTypes = new Class[]{
            String.class,String.class, String.class, Double.class, 
            Double.class, Double.class, Double.class, Boolean.class };        

        public ParametersTableModel(){
            // next static line should be replaced by a preference listener            
            recursive=true;               
            
        }
        
        /**
         * tell table model to represent the parameters of the given model. 
         */
        public void setModel(Model modelToPresent, boolean recursive){
            currentModel = modelToPresent;
            this.recursive=recursive;
            parameters = new Parameter[]{};
            if(currentModel!=null){
                // get list , create array and init array with content list
                Vector params = new Vector();
                Vector models = new Vector();
                addParamsFor(currentModel,params, models, recursive);
                parameters = new Parameter[params.size()];
                modelOfParameters = new Model[params.size()];
                for (int i=0; i<parameters.length; i++){
                    parameters[i] = (Parameter) params.elementAt(i); 
                    modelOfParameters[i]=(Model) models.elementAt(i);
                }
            }
            // notify observers
            fireTableDataChanged();
        }                
        
        protected void addParamsFor(Model model, Vector paramContainer, Vector modelContainer, boolean recursive) {
        
            
            // First append model parameters
            Parameter[] params     = model.getParameter();
            int         nbOfParams = params.length;
            
            // Create with initial data
            for (int i = 0; i < nbOfParams; i++) {
                Parameter p   = params[i];
                paramContainer.add(p);
                modelContainer.add(model);
            }
            
            if (recursive) {
                Model[] models = model.getModel();                
                for (int i = 0; i < models.length; i++) {
                    addParamsFor(models[i], paramContainer, modelContainer, true);
                }
            }
        }        
        
        // Next parts makes respond to the full TableModel interface        
        public Class 	getColumnClass(int columnIndex){
            return columnTypes[columnIndex];
        }
        
        public int 	getColumnCount(){
            return columnNames.length;
        }
        
        public String 	getColumnName(int columnIndex){
            return columnNames[columnIndex];            
        }
        
        public int 	getRowCount(){ 
            if (parameters!=null){
                return parameters.length;
            }
            return 0;
        }
        
        public Object 	getValueAt(int rowIndex, int columnIndex){
            Parameter p = parameters[rowIndex];
            
            // return name
            if (columnIndex==0){
                if(recursive){
                    Model model = modelOfParameters[rowIndex];
                    return model.getName()+"."+p.getName();
                }else{
                    return p.getName();
                }
                
            }else if (columnIndex==1){
                return p.getType();
            }
            
            // @todo ask quality software responsible to validate following code
            try{
                String getMethodName="get"+columnNames[columnIndex];
                Method get = Parameter.class.getMethod(getMethodName,new Class[0]);
                
                String hasMethodName="has"+columnNames[columnIndex];
                try{
                    Method has = Parameter.class.getMethod(hasMethodName,new Class[0]);
                    if (has.invoke(p, new Object[0]).equals(new Boolean(false))){
                        return null;
                    }
                }catch(NoSuchMethodException e){
                    
                }
                Object ret = get.invoke(p,new Object[0]);
                return ret;
            }catch(Exception e){
                new ReportDialog(new javax.swing.JFrame(), true, e).setVisible(true);
                return "Error";
            }
        }
        
        public boolean 	isCellEditable(int rowIndex, int columnIndex){
            Parameter p = parameters[rowIndex];            
            // return always true
            return true;
        }
                        
        public void setValueAt(Object aValue, int rowIndex, int columnIndex){
            Parameter p = parameters[rowIndex];
            Model m = modelOfParameters[rowIndex];
            logger.fine("parameter "+p.getName()+"@"
                    +m.getName()+" old:"+getValueAt(rowIndex, columnIndex)
                    +" new:"+aValue+"("+aValue.getClass()+")");
            
            // Check all methods that accept something else than a String as param
            if(columnNames[columnIndex].equals("Value")){
                Double v = (Double) aValue;
                p.setValue(v);
            }else if(columnNames[columnIndex].equals("MinValue")){               
                Double v = (Double) aValue;
                p.setMinValue(v);
            }else if(columnNames[columnIndex].equals("MaxValue")){               
                Double v = (Double) aValue;
                p.setMaxValue(v);
            }else if(columnNames[columnIndex].equals("Scale")){               
                Double v = (Double) aValue;
                p.setScale(v);
            }else if(columnNames[columnIndex].equals("HasFixedValue")){               
                Boolean b = (Boolean) aValue;
                p.setHasFixedValue(b);
            }else{           
            try{
                String setMethodName="set"+columnNames[columnIndex];
                 
                 Class[] c  = new Class[] { aValue.getClass() };
                Method set = Parameter.class.getMethod(setMethodName,c);
                Object[] o = new Object [] { aValue };
                set.invoke(p,o);
                logger.fine("methode invoked using reflexion");
            
            }catch(Exception e){
                new ReportDialog(new javax.swing.JFrame(), true, e).setVisible(true);
            }
            }
            
        }
    }
    
}
