/*
 JMMC
*/
package jmmc.mf.gui;

import jmmc.mcs.gui.*;
import hep.aida.*;
import hep.aida.ref.plotter.PlotterUtilities;
import uk.ac.starlink.table.*;
import java.util.*;
import nom.tam.fits.*;
import javax.swing.*;
import java.awt.*;
/**
 *
 * @author  mella
 */
public class PlotPanel extends javax.swing.JPanel
{
    private javax.swing.JButton     jButton1;
    private IPlotter plotter;
    private IDataPointSet dataPointSet;                    
    
    /** Creates new form PlotPanel */
    public PlotPanel()
    {
        IAnalysisFactory af     = IAnalysisFactory.create();
        ITree tree   = af.createTreeFactory().create();
        plotter = af.createPlotterFactory()
                       .create("Plot IDataPointSets");
        plotter.createRegions();       
        
        IDataPointSetFactory dpsf   = af.createDataPointSetFactory(tree);
        dataPointSet = dpsf.create("dataPointSet2",
                "TITLE...", 2);                                        
        plotter.region(0).plot(dataPointSet);   
        // remove title
        plotter.region(0).setTitle(null);              
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    private void initComponents() {                
        setLayout(new java.awt.BorderLayout());
        
        jButton1         = new javax.swing.JButton();
        jButton1.setText("Plot");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });                       
        add(jButton1, java.awt.BorderLayout.NORTH );
        
        JPanel p = new JPanel();
        
        Component c = PlotterUtilities.componentForPlotter(plotter);      
        c.setPreferredSize(new Dimension(297,210));
        //add the plotter
        p.add(c, java.awt.BorderLayout.CENTER);
        add(p, java.awt.BorderLayout.CENTER);
        
        
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)
    {          
        String fitsFileName="/home/users/mella/tmp/test.fits";                            
         // Create a two dimensional IDataPointSet.
        
        try{
        // search last VISAMP ext
        Fits fits = new Fits(fitsFileName);
        BasicHDU[] hduList = fits.read();
        String finalName=fitsFileName;
        for (int i = hduList.length-1 ; i >=0 ; i--)
        {   
            BasicHDU hdu = hduList[i];
            //hdu.info();
            String extName = hdu.getTrimmedString("EXTNAME");            
            System.out.println(extName);
            if(extName!=null){
                if(extName.equals("OI_VIS2")){
             
                fitsFileName=finalName+"#"+i;
                           }
            }        
        }
            

        //open OI_VIS table
        StarTable table = loadTable(fitsFileName);    
        // Create a synthetic column for radius
         
        
        Vector columnNames = new Vector();                    
        for (int i = 0; i < table.getColumnCount(); i++)
        {            
            ValueInfo info = table.getColumnInfo(i);
            columnNames.add(info.getName());
            
            System.out.print("info.name["+i+"]="+info.getName());
            System.out.print(" desc="+info.getDescription());
            if(info.getShape()!=null){
                System.out.print(" shape="+info.getShape().length);
                System.out.print(" elementSize="+info.getElementSize());
            }
            System.out.print(" contentClass="+info.getContentClass());
            System.out.println(" unit="+info.getUnitString());
        }        
        
        // Get index of right columns....
        int uIndex= columnNames.indexOf("UCOORD");
        int vIndex= columnNames.indexOf("VCOORD");
        //int xIndex= columnNames.indexOf("VISAMP");
        int xIndex= columnNames.indexOf("VIS2DATA");
        //int xErrIndex= columnNames.indexOf("VISAMPERR");
        int xErrIndex= columnNames.indexOf("VIS2ERR");
        
        for (int i = 0; i < table.getRowCount(); i++)
        {                        
            double u = ((Double)(table.getCell(i,uIndex))).doubleValue();
            double v = ((Double)(table.getCell(i,vIndex))).doubleValue();            
            double y=Math.sqrt(u*u+v*v);
            double x=((Double)(table.getCell(i,xIndex))).doubleValue();
            double xErr=((Double)(table.getCell(i,xErrIndex))).doubleValue()/2;                                    
            
            dataPointSet.addPoint();
            dataPointSet.point(i).coordinate(0).setValue(y);            
            dataPointSet.point(i).coordinate(1).setValue(x);
            dataPointSet.point(i).coordinate(1).setErrorPlus(xErr);
            dataPointSet.point(i).coordinate(1).setErrorMinus(xErr);
        }           
               
        }catch(Exception e){
            new ReportDialog(new javax.swing.JFrame(), true, e).setVisible(true);
        }
        
        
    }

    public StarTable loadTable( String filename ) throws java.io.IOException{
        return new StarTableFactory().makeStarTable( filename, "fits" );    
      }
    
    
}
