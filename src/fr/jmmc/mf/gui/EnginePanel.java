/*
 * EnginePanel.java
 *
 * Created on 28 septembre 2006, 13:43
 */

package jmmc.mf.gui;
import jmmc.mf.svr.*;
import jmmc.mcs.log.MCSLogger;
import jmmc.mcs.gui.ReportDialog;

import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;



import java.util.logging.*;
import java.io.*;
import jmmc.mf.engine.*;
import java.awt.*;
import java.awt.event.*;

/**
 *
 * @author  mella
 */
public class EnginePanel extends javax.swing.JPanel {
    Logger _logger = MCSLogger.getLogger();
    Parameter[] parameters=null;    
    EngineParamsTableModel engineParamsTableModel;
    private EngineParamsTable paramsTable;
    
    /* default colors */
    static final Color ROFieldColor = Color.WHITE;
    static final Color RWFieldColor = Color.LIGHT_GRAY;        
    
    /** Creates new form EnginePanel */
    public EnginePanel(){
        initComponents();  
        paramsTable = new EngineParamsTable();
        JTableHeader header = paramsTable.getTableHeader();
        tablePanel.add(header, BorderLayout.NORTH);
        tablePanel.add(paramsTable, BorderLayout.CENTER);        
        updateParametersTable();
    }
     
    protected void updateParametersTable(){
        MCSLogger.trace();        
        
        // Get first the engine description
        String       xml;
        try {
            xml  = ServerImpl.get_eng_param_list();
        }catch (Exception e) {          
            new ReportDialog(new javax.swing.JFrame(), true, e).setVisible(true);
            return;
        }  
        Engine engine;
        // then unmarshal given description
        StringReader reader = new StringReader(xml);
        try {
            engine = Engine.unmarshal(reader);            
        } catch (Exception e) {
            _logger.fine("Can't read engine desc");
            _logger.fine(e.getMessage());
            new ReportDialog(new javax.swing.JFrame(), true, e).setVisible(true);
            return;
        }  
        
        // init parameters
        parameters = engine.getParameter();        

        // init new table model
        engineParamsTableModel= new EngineParamsTableModel(); 
        engineParamsTableModel.addColumn("Param name");
        engineParamsTableModel.addColumn("Param value");                        
        
        // fill table rows
        for (int i=0; i< parameters.length; i++){
            Parameter p = parameters[i];
            String paramName= p.getName();
            String paramValue= p .getValue();            
            engineParamsTableModel.addRow(new Object[]{paramName,paramValue} );                                  
        }
        // Set the new table model of the table
        paramsTable.setModel(engineParamsTableModel);                     
        
      }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        doNextStepButton = new javax.swing.JButton();
        doNextStepsButton = new javax.swing.JButton();
        abortButton = new javax.swing.JButton();
        stepSpinner = new javax.swing.JSpinner();
        doAllStepsButton = new javax.swing.JButton();
        tableScrollPane = new javax.swing.JScrollPane();
        tablePanel = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        doNextStepButton.setText("Do one Step");
        doNextStepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doNextStepButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        add(doNextStepButton, gridBagConstraints);

        doNextStepsButton.setText("Do next Steps");
        doNextStepsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doNextStepsButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(doNextStepsButton, gridBagConstraints);

        abortButton.setText("Abort");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(abortButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(stepSpinner, gridBagConstraints);

        doAllStepsButton.setText("Run");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        add(doAllStepsButton, gridBagConstraints);

        tableScrollPane.setMinimumSize(new java.awt.Dimension(250, 80));
        tableScrollPane.setPreferredSize(new java.awt.Dimension(250, 80));
        tablePanel.setLayout(new java.awt.BorderLayout());

        tableScrollPane.setViewportView(tablePanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        add(tableScrollPane, gridBagConstraints);

    }
    // </editor-fold>//GEN-END:initComponents
    
    private void doNextStepsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doNextStepsButtonActionPerformed
        MCSLogger.trace();
        try {
            
            int i = ((Integer) stepSpinner.getValue()).intValue();
            ServerImpl.donextstep(i);            
        } catch (Exception e) {
            new ReportDialog(new javax.swing.JFrame(), true, e).setVisible(true);
        }
    }//GEN-LAST:event_doNextStepsButtonActionPerformed
    
    private void doNextStepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doNextStepButtonActionPerformed
        MCSLogger.trace();
        try {
            ServerImpl.donextstep(1);            
        } catch (Exception e) {
            new ReportDialog(new javax.swing.JFrame(), true, e).setVisible(true);
        }
    }//GEN-LAST:event_doNextStepButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abortButton;
    private javax.swing.JButton doAllStepsButton;
    private javax.swing.JButton doNextStepButton;
    private javax.swing.JButton doNextStepsButton;
    private javax.swing.JSpinner stepSpinner;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JScrollPane tableScrollPane;
    // End of variables declaration//GEN-END:variables
    
    
    /** table model of engine parameters table */
    class EngineParamsTableModel extends DefaultTableModel{
        public EngineParamsTableModel(){
            super();
        }
        public EngineParamsTableModel(Object[][] data, Object[] columnNames) {
            super(data, columnNames);
        }
        
        /** Make return false by default */
        public boolean isCellEditable(int row, int column){
            if (parameters==null){
                return false;
            }
            // Do no accept to change parameter name
            if(column!=0)            {
                // just accept to change value if parameter is writable
                Parameter p = parameters[row];
                return p.getEditable();
            }
            return false;
        }   
        
        /** */
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            // super.setValueAt(aValue,rowIndex,columnIndex);
            try {
                _logger.fine("Setting new param value on "+rowIndex+":"+columnIndex+" -> "+aValue);
                Parameter p = parameters[rowIndex];
                ServerImpl.set_eng_param(p.getName(), ""+aValue);
            } catch (Exception e) {
                new ReportDialog(new javax.swing.JFrame(), true, e).setVisible(true);
            }
            
        }
        
    }
    /** table showing engine parameters */
    class EngineParamsTable extends JTable{                
        
        public EngineParamsTable(){
            super();                                                     
            TableCellRenderer tcr = new EngineParamsTableCellRenderer();           
            this.setDefaultRenderer(String.class,tcr);
            this.setDefaultRenderer(Object.class,tcr);            
        }
        
        /** Make return false by default */
        public String getToolTipText(MouseEvent e) {
            if (parameters==null){
                return null;
            }

            String tip = null;
            java.awt.Point point = e.getPoint();
            int rowIndex = rowAtPoint(point);
            int colIndex = columnAtPoint(point);
            int realColumnIndex = convertColumnIndexToModel(colIndex);
            
            Parameter p = parameters[rowIndex];
            return p.getDesc();            
        }
        
        /** Change color depending RO or RW state */
        class EngineParamsTableCellRenderer extends DefaultTableCellRenderer{
            public Component getTableCellRendererComponent(
                    JTable table, Object obj,
                    boolean isSelected, boolean hasFocus,
                    int row, int column) {
                Component c = super.getTableCellRendererComponent(
                        table,  obj, isSelected, hasFocus, row, column);
                c.setBackground(ROFieldColor);
                if(column!=0){
                    Parameter p = parameters[row];                    
                    if(p.getEditable()){
                        c.setBackground(RWFieldColor);
                    }
                }
                return this;
            }
        }        
    }
    
    
    
    
}
